<launch>


 <!-- Cameras -->
  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="device_type"         default="d415"/>
    <arg name="camera" value="d415" />

  </include>
  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="camera" value="d435" />
     <arg name="device_type"         default="d435"/>
  </include>

  <include file="$(find realsense2_camera)/launch/rs_t265.launch">
    <arg name="depth_registration" value="True" />
    <arg name="camera" value="t265" />
     <arg name="device_type"         default="t265"/>
  </include>

  <node pkg="tf" type="static_transform_publisher" name="base_to_d415_tf"
      args="0.175 0.0 0.119 0.0 0.0 0.0 /base_link /camera1_link 100" />
  <node pkg="tf" type="static_transform_publisher" name="base_to_d435_tf"
      args="-0.125 0.0 0.459 0.0 0.0 0.0 /base_link /camera2_link 100" />

  <node pkg="tf" type="static_transform_publisher" name="t265_static" args="0 0 0 0 0 0 base_link t265_odom_frame 100"/>
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_base_foot" args="0 0 0 0 0 0 base_footprint base_link 100"/>


  <arg name="database_path"     default="rtabmap-multi.db"/>
  <arg name="rgbd_odometry"     default="false"/>
  <arg name="rtabmapviz"        default="false"/>
  <arg name="localization"      default="false"/>
  <arg name="simulation"        default="false"/>
  <arg name="sw_registered"     default="false"/>
  <arg     if="$(arg localization)" name="args"  default=""/>
  <arg unless="$(arg localization)" name="args"  default="--delete_db_on_start"/>
  <arg name="wait_for_transform"  default="true"/> 
  <!-- 
      robot_state_publisher's publishing frequency in "turtlebot_bringup/launch/includes/robot.launch.xml" 
      can be increase from 5 to 10 Hz to avoid some TF warnings.
  -->

     <!-- sync rgb/depth images per camera -->
   <group ns="d415">
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="load rtabmap_ros/rgbd_sync d415_nodelet_manager">
      <remap from="color/image_raw"       to="rgb/image_rect_color"/>
      <remap from="depth/image_rect_raw"     to="depth_registered/image_raw"/>
      <remap from="color/camera_info" to="rgb/camera_info"/>
    </node>
   </group>
   <group ns="d435">
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="load rtabmap_ros/rgbd_sync d435_nodelet_manager">
    <remap from="color/image_raw"       to="rgb/image_rect_color"/>
      <remap from="depth/image_rect_raw"     to="depth_registered/image_raw"/>
      <remap from="color/camera_info" to="rgb/camera_info"/>
    </node>
   </group>

  
  <!-- Navigation stuff (move_base) -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>
  

  <!-- Mapping -->
  <group ns="rtabmap">

    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg args)">
	  <param name="database_path"       type="string" value="$(arg database_path)"/>
	  <param name="frame_id"            type="string" value="base_footprint"/>
	  <param name="wait_for_transform" type="bool"   value="$(arg wait_for_transform)"/>
	  <param name="subscribe_depth"     type="bool"   value="false"/>
	  <param name="subscribe_scan"      type="bool"   value="false"/>
    <param name="subscribe_rgbd"   type="bool"   value="true"/>
    <param name="rgbd_cameras"    type="int"    value="2"/>
	  <param name="map_negative_poses_ignored" type="bool" value="true"/>


    <!-- When sending goals on /rtabmap/goal topic, use actionlib to communicate with move_base --> 
	  <param name="use_action_for_goal" type="bool" value="true"/>
    <remap from="move_base"            to="/move_base"/>
	
	  <!-- inputs -->
	  <remap from="scan"            to="/scan"/>
    <remap from="rgbd_image0"       to="/d415/rgbd_image"/>
    <remap from="rgbd_image1"       to="/d435/rgbd_image"/>


  	  
  	  <!-- output -->
  	  <remap from="grid_map" to="/map"/>
	
	  <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
	  <param name="RGBD/ProximityBySpace"        type="string" value="true"/>   <!-- Local loop closure detection (using estimated position) with locations in WM -->
	  <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>  <!-- Set to false to generate map correction between /map and /odom -->
	  <param name="Kp/MaxDepth"                  type="string" value="4.0"/>
	  <param name="Reg/Strategy"                 type="string" value="2"/>      <!-- Loop closure transformation: 0=Visual, 1=ICP, 2=Visual+ICP -->
	  <param name="Icp/CorrespondenceRatio"      type="string" value="0.3"/>
	  <param name="Vis/MinInliers"               type="string" value="15"/>      <!-- 3D visual words minimum inliers to accept loop closure -->
	  <param name="Vis/InlierDistance"           type="string" value="0.1"/>    <!-- 3D visual words correspondence distance -->
	  <param name="RGBD/AngularUpdate"           type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
	  <param name="RGBD/LinearUpdate"            type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
	  <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="0"/> 
	  <param name="Rtabmap/TimeThr"              type="string" value="0"/>
	  <param name="Mem/RehearsalSimilarity"      type="string" value="0.30"/>
	  <param name="Reg/Force3DoF"                type="string" value="true"/>
	  <param name="GridGlobal/MinSize"           type="string" value="20"/>
    <param name="RGBD/OptimizeMaxError"                type="double"      value="0.1"  />
    <param name="odom_frame_id" value="odom"/> <!-- adjust to actual odometry frame id -->
   <param name="odom_tf_linear_variance" value="0.0001"/> <!-- adjust depending on real odom error -->
   <param name="odom_tf_angular_variance" value="0.0005"/> <!-- adjust depending on real odom error -->

	  
	  <!-- localization mode -->
	  <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
	  <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
	  <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/> 
    </node>
   
    <!-- Odometry : ONLY for testing without the actual robot! /odom TF should not be already published. -->
    <node if="$(arg rgbd_odometry)" pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <param name="frame_id"                    type="string" value="base_footprint"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="Reg/Force3DoF"               type="string" value="true"/>
      <param name="Vis/InlierDistance"          type="string" value="0.05"/>
      
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
      <remap from="depth/image"     to="$(arg depth_topic)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
    </node>
    
    <!-- visualization with rtabmapviz -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
  	  <param name="subscribe_depth"             type="bool" value="true"/>
      <param name="subscribe_scan"              type="bool" value="true"/>
      <param name="frame_id"                    type="string" value="base_footprint"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
    
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
      <remap from="depth/image"     to="$(arg depth_topic)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      <remap from="scan"            to="/scan"/>
    </node>
    
  </group>
</launch>
