<launch>

  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="camera" value="d435_2" />
     <arg name="serial_no"         default="806312060532"/>
  </include>

 <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="camera" value="d435_3" />
     <arg name="serial_no"         default="851112061066"/>
  </include>

 
  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="camera" value="d435_4" />
     <arg name="serial_no"         default="826212070362"/>
  </include>

   <node name="ydlidar_node"  pkg="ydlidar"  type="ydlidar_node" output="screen" respawn="false" >
    <param name="port"         type="string" value="/dev/ttyUSB1"/>  
    <param name="frame_id"     type="string" value="laser_frame"/>
    <param name="resolution_fixed"    type="bool"   value="true"/>
    <param name="auto_reconnect"    type="bool"   value="true"/>
    <param name="angle_min"    type="double" value="-180" />
    <param name="angle_max"    type="double" value="180" />
    <param name="range_min"    type="double" value="0.18" />
    <param name="range_max"    type="double" value="10.0" />
    <param name="ignore_array" type="string" value="" />
  </node>

  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser4"
    args="0.0325 0.0 0.15 0.0 0.0  0.0 /base_footprint /laser_frame 40" />


  <node pkg="tf" type="static_transform_publisher" name="base_to_d435_2_tf"
      args="0.105 0 0.55 0 -0.7 0  base_link d435_2_link 20" />

 <node pkg="tf" type="static_transform_publisher" name="base_to_d435_3_tf"
      args="0.12 -0.002 0.51 0 0 0  base_link d435_3_link 20" />


 <node pkg="tf" type="static_transform_publisher" name="base_to_d435_4_tf"
      args="0.135 0 0.48 0 1.0472 0  base_link d435_4_link 20" />


 <node pkg="tf" type="static_transform_publisher" name="base_link_to_base_foot" args="0 0 0 0 0 0 base_footprint base_link 100"/>
  
  <arg name="database_path"     default="rtabmap.db"/>
  <arg name="rgbd_odometry"     default="false"/>
  <arg name="rtabmapviz"        default="false"/>
  <arg name="localization"      default="false"/>
  <arg name="simulation"        default="false"/>
  <arg name="sw_registered"     default="false"/>
  <arg     if="$(arg localization)" name="args"  default=""/>
  <arg unless="$(arg localization)" name="args"  default="--delete_db_on_start"/>

  <arg     if="$(arg simulation)" name="rgb_topic"   default="/camera/rgb/image_raw"/>
  <arg unless="$(arg simulation)" name="rgb_topic"   default="/d435/color/image_raw"/>
  <arg     if="$(arg simulation)" name="depth_topic" default="/camera/depth/image_raw"/>
  <arg unless="$(arg simulation)" name="depth_topic" default="/d435/aligned_depth_to_color/image_raw"/>
  <arg name="odom_topic"         value="/mobile_base/odom"/>



  
  <arg name="wait_for_transform"  default="0.2"/> 
  <!-- 
      robot_state_publisher's publishing frequency in "turtlebot_bringup/launch/includes/robot.launch.xml" 
      can be increase from 5 to 10 Hz to avoid some TF warnings.
  -->
  
  <!-- Navigation stuff (move_base) -->
  <!--include unless="$(arg simulation)" file="$(find turtlebot_bringup)/launch/3dsensor.launch">
     <arg     if="$(arg sw_registered)" name="depth_registration" value="false"/>
     <arg unless="$(arg sw_registered)" name="depth_registration" value="true"/>
  </include-->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base.launch.xml"/>

 <!-- sync rgb/depth images per camera -->



  <group ns="d435_2">
    <node pkg="nodelet" type="nodelet" name="nodelet_manager2" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="rgbd_sync2" args="load rtabmap_ros/rgbd_sync nodelet_manager2">
      <remap from="rgb/image"       to="color/image_rect_color"/>
      <remap from="depth/image"     to="aligned_depth_to_color/image_raw"/>
      <remap from="rgb/camera_info" to="color/camera_info"/>
      <remap from="depth/camera_info" to="depth/camera_info"/>
      <param name="approx"          value="true"/>

    </node>
     
  </group>

  <group ns="d435_3">
    <node pkg="nodelet" type="nodelet" name="nodelet_manager3" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="rgbd_sync3" args="load rtabmap_ros/rgbd_sync nodelet_manager3">
      <remap from="rgb/image"       to="color/image_rect_color"/>
      <remap from="depth/image"     to="aligned_depth_to_color/image_raw"/>
      <remap from="rgb/camera_info" to="color/camera_info"/>
      <remap from="depth/camera_info" to="depth/camera_info"/>
      <param name="approx"          value="true"/>
     
    </node>
     
  </group>



  <!-- Mapping -->
  <group ns="rtabmap">

    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg args)">

	  <param name="database_path"       type="string" value="$(arg database_path)"/>
	  <param name="frame_id"            type="string" value="base_footprint"/>
	  <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>

          <param name="subscribe_rgbd"     type="bool"   value="true"/>
	  <param name="subscribe_depth"     type="bool"   value="false"/>
 	  <param name="subscribe_rgb"      type="bool"   value="false"/>
	  <param name="subscribe_scan"      type="bool"   value="true"/>

	  <param name="map_always_update" type="bool" value="false"/>

	  <param name="rgbd_cameras"     type="int"    value="2"/>
	  <param name="gen_scan"         type="bool"   value="false"/>

          <!-- When sending goals on /rtabmap/goal topic, use actionlib to communicate with move_base --> 
	  <param name="use_action_for_goal" type="bool" value="true"/>
          <remap from="move_base"            to="/move_base"/>
	
	  <!-- inputs -->
  	
	  <remap from="rgbd_image0"     to="/d435_2/rgbd_image"/>
	  <remap from="rgbd_image1"     to="/d435_3/rgbd_image"/>
	  <remap from="scan" to="/scan"/>	
 	 
	  <remap from="odom" to="$(arg odom_topic)"/>

          <param name="Vis/EstimationType" type="string" value="0"/> <!-- should be 0 for multi-cameras -->
          <param name="Vis/CorGuessWinSize" type="string" value="0"/> <!-- should be 0 for multi-cameras -->

  	  <!-- output -->
  	  <remap from="grid_map" to="/map"/>  

	  <!-- RTAB-Map's parameters -->
          <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>
          <param name="RGBD/ProximityBySpace"     type="string" value="true"/>
          <param name="RGBD/AngularUpdate"        type="string" value="0.01"/>
          <param name="RGBD/LinearUpdate"         type="string" value="0.01"/>
          <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>
          <param name="Grid/FromDepth"            type="string" value="false"/> <!-- occupancy grid from lidar -->
          <param name="Reg/Force3DoF"             type="string" value="true"/>
          <param name="Reg/Strategy"              type="string" value="2"/> <!-- 1=ICP -->
          <param name="Kp/MaxDepth"               type="string" value="4.0"/>
	  <param name="Kp/MaxFeatures"            type="string" value="0"/>
          <param name="Vis/MinInliers"               type="string" value="25"/>

          <!-- ICP parameters -->
          <param name="Icp/VoxelSize"                 type="string" value="0.05"/>
          <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.1"/>
	  <param name="RGBD/SavedLocalizationIgnored" type="string" value="true"/>
          <param name="Rtabmap/DetectionRate"        type="string" value="1"/>
          <param name="RGBD/OptimizeStrategy" type="string" value="2"/> <!-- g2o=1, GTSAM=2 -->
          <param name="RGBD/OptimizeRobust" type="string" value="true"/>
          <param name="RGBD/OptimizeMaxError" type="string" value="0"/> <!-- should be 0 if RGBD/OptimizeRobust is true -->

	  <!-- localization mode -->
	  <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
	  <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
	  <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/> 

    </node>

	<node if="$(arg localization)" pkg="rotate_revovery" name="rotate" type="rotate.py" output="screen" />
   
    <!-- Odometry : ONLY for testing without the actual robot! /odom TF should not be already published. -->
    <node if="$(arg rgbd_odometry)" pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <param name="frame_id"                    type="string" value="base_footprint"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="Reg/Force3DoF"               type="string" value="true"/>
      <param name="Vis/InlierDistance"          type="string" value="0.05"/>
      
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
      <remap from="depth/image"     to="$(arg depth_topic)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
    </node>
    
    <!-- visualization with rtabmapviz -->
    <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
  	  <param name="subscribe_depth"             type="bool" value="true"/>
      <param name="subscribe_scan"              type="bool" value="true"/>
      <param name="frame_id"                    type="string" value="base_footprint"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
    
      <remap from="rgb/image"       to="$(arg rgb_topic)"/>
      <remap from="depth/image"     to="$(arg depth_topic)"/>
      <remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
      <remap from="scan"            to="/scan"/>
    </node>


   <node pkg="nodelet" type="nodelet" name="obstacles_detection" args="standalone rtabmap_ros/obstacles_detection">
      <remap from="cloud" to="/d435_4/depth_registered/points"/>
      <remap from="obstacles" to="/d435_4/planner_cloud"/>
      <param name="frame_id" type="string" value="base_footprint"/>
      <param name="map_frame_id" type="string" value="map"/>
       <param name="queue_size"          value="30"/>
      <param name="min_cluster_size" type="int" value="15"/>
     
  </node>

 
  </group>
</launch>
